// Reset
// * {
//     all: unset;
// }
*:not(popover) {
    all: unset;
}

@import "./material"; // Material colours
@import "./colours"; // Global colour definitions. Uses material colours as base.
@import "./lib_mixins";
@import "./lib_classes";
@import "./common"; // Context menu n stuff

// Helper functions
@function to-root-transparency($colour, $override: False) {
    @if $override == True or $transparent == True {
        $colour: change-color($colour, $alpha: 1 - $rootTransparency);
    }
    @return $colour;
}

@function to-dark-mode($colour, $override: False) {
    @if $override == True or $darkmode == False {
        $colour: complement(invert($colour));
    }
    @return $colour;
}

// Components
@import "./specific";
@import "./bar";
@import "./cheatsheet";
@import "./osd";
@import "./overview";
@import "./osk";
@import "./sidebars";
@import "./session";
@import "./notifications";
@import "./todoscreen";
@import "./applauncher";
@import "./switcher";
@import "./music";

// Classes for interaction
.growingRadial {
    transition: 300ms cubic-bezier(0.2, 0, 0, 1);
}
.fadingRadial {
    transition: 50ms cubic-bezier(0.2, 0, 0, 1);
}
